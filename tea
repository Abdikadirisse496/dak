#!/usr/bin/env python

# Sanity check the database
# Copyright (C) 2000  James Troup <james@nocrew.org>
# $Id: tea,v 1.4 2001-01-28 09:06:44 troup Exp $

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   And, lo, a great and menacing voice rose from the depths, and with
#   great wrath and vehemence it's voice boomed across the
#   land... ``hehehehehehe... that *tickles*''
#                                                       -- aj on IRC

################################################################################

import pg, sys, os, string, stat
import utils, db_access
import apt_pkg;

################################################################################

Cnf = None;
projectB = None;
db_files = {};
waste = 0.0;
excluded = {};

def process_dir (arg, dirname, filenames):
    global waste, db_files, excluded;
    
    if string.find(dirname, '/disks-') != -1 or string.find(dirname, 'upgrade-') != -1: 
        return;
    # hack; can't handle .changes files
    if string.find(dirname, 'proposed-updates') != -1:
        return;
    for name in filenames:
        filename = os.path.abspath(dirname+'/'+name);
        filename = string.replace(filename, 'potato-proposed-updates', 'proposed-updates');
        if os.path.isfile(filename) and not os.path.islink(filename) and not db_files.has_key(filename) and not excluded.has_key(filename):
            waste = waste + os.stat(filename)[stat.ST_SIZE];
            print filename
################################################################################

def check_files():

    print "Building list of Database files...";

    q = projectB.query("SELECT l.path, f.filename FROM files f, location l WHERE f.location = l.id")
    ql = q.getresult();

    db_files = {};
    for i in ql:
	filename = os.path.abspath(i[0] + i[1]);
        db_files[filename] = "";
        if os.access(filename, os.R_OK) == 0:
            sys.stderr.write("W: '%s' doesn't exist.\n" % (filename));

    file = utils.open_file(Cnf["Dir::OverrideDir"]+'override.unreferenced','r');
    for filename in file.readlines():
        filename = filename[:-1];
        excluded[filename] = "";

    print "Checking against existent files...";

    os.path.walk(Cnf["Dir::RootDir"]+'dists/', process_dir, None);

    print
    print "%s wasted..." % (utils.size_type(waste));

################################################################################

def check_dscs():
    count = 0;
    suite = 'unstable';
    for component in Cnf.SubTree("Component").List():
        if component == "mixed":
            continue;
        component = string.lower(component);
        list_filename = '%s%s_%s_source.list' % (Cnf["Dir::ListsDir"], suite, component);
        list_file = utils.open_file(list_filename, 'r');
        for line in list_file.readlines():
            file = line[:-1];
            try:
                utils.parse_changes(file, 1);
            except utils.invalid_dsc_format_exc, line:
                sys.stderr.write("E: syntax error in .dsc file '%s', line %s.\n" % (file, line));
                count = count + 1;

    if count:
        sys.stderr.write("Found %s invalid .dsc files.\n" % (count));

################################################################################

def main ():
    global Cnf, projectB, db_files, waste, excluded;

    apt_pkg.init();
    
    Cnf = apt_pkg.newConfiguration();
    apt_pkg.ReadConfigFileISC(Cnf,utils.which_conf_file());

    Arguments = [('d',"debug","Tea::Options::Debug", "IntVal"),
                 ('h',"help","Tea::Options::Help"),
                 ('v',"version","Tea::Options::Version")];

    apt_pkg.ParseCommandLine(Cnf,Arguments,sys.argv);
    projectB = pg.connect('projectb', 'localhost');
    db_access.init(Cnf, projectB);

    check_dscs();
    #check_files();

#######################################################################################

if __name__ == '__main__':
    main()

