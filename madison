#!/usr/bin/env python

# 'Fix' stable to make debian-cd and dpkg -BORGiE users happy
# Copyright (C) 2000, 2001  James Troup <james@nocrew.org>
# $Id: madison,v 1.9 2001-09-05 18:51:21 rmurray Exp $

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   And, lo, a great and menacing voice rose from the depths, and with
#   great wrath and vehemence it's voice boomed across the
#   land... ``hehehehehehe... that *tickles*''
#                                                       -- aj on IRC

################################################################################

import pg, sys, os, string
import utils, db_access
import apt_pkg;

################################################################################

Cnf = None;
projectB = None;

################################################################################

def arch_compare (a, b):
    if a == "source" and b == "source":
        return 0;
    elif a == "source":
        return -1;
    elif b == "source":
        return 1;

    return cmp (a, b);

################################################################################

def main ():
    global Cnf, projectB;

    apt_pkg.init();

    Cnf = apt_pkg.newConfiguration();
    apt_pkg.ReadConfigFileISC(Cnf,utils.which_conf_file());

    Arguments = [('a',"architecture","Madison::Options::Architecture", "HasArg"),
                 ('m',"maintainer","Madison::Options::Architecture"),
                 ('s',"suite","Madison::Options::Suite", "HasArg"),
                 ('D',"debug","Madison::Options::Debug", "IntVal"),
                 ('h',"help","Madison::Options::Help"),
                 ('V',"version","Madison::Options::Version")];

    packages = apt_pkg.ParseCommandLine(Cnf,Arguments,sys.argv);
    Options = Cnf.SubTree("Madison::Options")
    projectB = pg.connect(Cnf["DB::Name"], Cnf["DB::Host"], int(Cnf["DB::Port"]));
    db_access.init(Cnf, projectB);

    if packages == []:
        utils.fubar("need at least one package name as an argument.");

    if Options.get("Suite"):
        con_suites = "AND (";
        for suite in string.split(Options["Suite"]):
            suite_id = db_access.get_suite_id(suite);
            if suite_id == -1:
                utils.warn("suite '%s' not recognised." % (suite));
            else:
                con_suites = con_suites + "su.id = %s OR " % (suite_id)
        con_suites = con_suites[:-3] + ")"
    else:
        con_suites = "";

    if Options.get("Architecture"):
        con_architectures = "AND (";
        check_source = 0;
        for architecture in string.split(Options["Architecture"]):
            if architecture == "source":
                check_source = 1;
            architecture_id = db_access.get_architecture_id(architecture);
            if architecture_id == -1:
                utils.warn("architecture '%s' not recognised." % (architecture));
            else:
                con_architectures = con_architectures + "a.id = %s OR " % (architecture_id)
        con_architectures = con_architectures[:-3] + ")"
    else:
        con_architectures = "";
        check_source = 1;

    for package in packages:
	q = projectB.query("SELECT b.package, b.version, a.arch_string, su.suite_name, m.name FROM binaries b, architecture a, suite su, bin_associations ba, maintainer m WHERE b.package = '%s' AND a.id = b.architecture AND su.id = ba.suite AND b.id = ba.bin AND b.maintainer = m.id %s %s" % (package, con_suites, con_architectures));
        ql = q.getresult();
        if check_source:
            q = projectB.query("SELECT s.source, s.version, 'source', su.suite_name, m.name FROM source s, suite su, src_associations sa, maintainer m WHERE s.source = '%s' AND su.id = sa.suite AND s.id = sa.source AND s.maintainer = m.id %s" % (package, con_suites));
            ql.extend(q.getresult());
        d = {};
        for i in ql:
            package = i[0];
            version = i[1];
            architecture = i[2];
            suite = i[3];
            if not d.has_key(version):
                d[version] = {};
            if not d[version].has_key(suite):
                d[version][suite] = [];
            d[version][suite].append(architecture);

        versions = d.keys();
        versions.sort(apt_pkg.VersionCompare);
        for version in versions:
            suites = d[version].keys();
            suites.sort();
            for suite in suites:
                sys.stdout.write("%10s | %10s | %13s | " % (package, version, suite));
                count = 0;
                arches = d[version][suite];
                arches.sort(arch_compare);
                for arch in arches:
                    if count > 0:
                        sys.stdout.write(', ');
                    sys.stdout.write(arch);
                    count = count + 1;
                sys.stdout.write('\n');

#######################################################################################

if __name__ == '__main__':
    main()

