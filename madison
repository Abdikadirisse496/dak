#!/usr/bin/env python

# Display information about package(s) (suite, version, etc.)
# Copyright (C) 2000, 2001, 2002  James Troup <james@nocrew.org>
# $Id: madison,v 1.22 2002-12-08 17:25:17 troup Exp $

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

################################################################################

#   And, lo, a great and menacing voice rose from the depths, and with
#   great wrath and vehemence it's voice boomed across the
#   land... ``hehehehehehe... that *tickles*''
#                                                       -- aj on IRC

################################################################################

import pg, sys;
import utils, db_access;
import apt_pkg;

################################################################################

Cnf = None;
projectB = None;

################################################################################

def usage (exit_code=0):
    print """Usage: madison [OPTION] PACKAGE[...]
Display information about PACKAGE(s).

  -a, --architecture=ARCH    only show info for this architecture
  -r, --regex                treat PACKAGE as a regex
  -s, --suite=SUITE          only show info for this suite
  -S, --source-and-binary    show info for the binary children of source pkgs
  -h, --help                 show this help and exit

Both ARCH and SUITE can be space seperated lists, e.g.
    --architecture=\"m68k i386\""""
    sys.exit(exit_code)

################################################################################

def main ():
    global Cnf, projectB;

    Cnf = utils.get_conf()

    Arguments = [('a', "architecture", "Madison::Options::Architecture", "HasArg"),
                 ('c', "component", "Madison::Options::Component", "HasArg"),
                 ('r', "regex", "Madison::Options::Regex"),
                 ('s', "suite", "Madison::Options::Suite", "HasArg"),
                 ('S', "source-and-binary", "Madison::Options::Source-And-Binary"),
                 ('h', "help", "Madison::Options::Help")];
    for i in [ "architecture", "component", "regex", "suite",
               "source-and-binary", "help" ]:
	if not Cnf.has_key("Madison::Options::%s" % (i)):
	    Cnf["Madison::Options::%s" % (i)] = "";

    packages = apt_pkg.ParseCommandLine(Cnf,Arguments,sys.argv);
    Options = Cnf.SubTree("Madison::Options")

    if Options["Help"]:
        usage();
    if not packages:
        utils.fubar("need at least one package name as an argument.");

    projectB = pg.connect(Cnf["DB::Name"], Cnf["DB::Host"], int(Cnf["DB::Port"]));
    db_access.init(Cnf, projectB);

    # Parse -a/--architecture, -s/--suite
    (con_suites, con_architectures, con_components, check_source) = \
                 utils.parse_args(Options);

    if Options["Regex"]:
        comparison_operator = "~";
    else:
        comparison_operator = "=";

    if Options["Source-And-Binary"]:
        new_packages = [];
        for package in packages:
            q = projectB.query("SELECT DISTINCT package FROM binaries WHERE EXISTS (SELECT s.source FROM source s WHERE binaries.source = s.id AND s.source %s '%s')" % (comparison_operator, package));
            new_packages.extend(map(lambda x: x[0], q.getresult()));
            new_packages.append(package);
        packages = new_packages;

    results = 0;
    for package in packages:
        q = projectB.query("SELECT b.package, b.version, a.arch_string, su.suite_name, m.name FROM binaries b, architecture a, suite su, bin_associations ba, maintainer m WHERE b.package %s '%s' AND a.id = b.architecture AND su.id = ba.suite AND b.id = ba.bin AND b.maintainer = m.id %s %s" % (comparison_operator, package, con_suites, con_architectures));
        ql = q.getresult();
        if check_source:
            q = projectB.query("SELECT s.source, s.version, 'source', su.suite_name, m.name FROM source s, suite su, src_associations sa, maintainer m WHERE s.source %s '%s' AND su.id = sa.suite AND s.id = sa.source AND s.maintainer = m.id %s" % (comparison_operator, package, con_suites));
            ql.extend(q.getresult());
        d = {};
        for i in ql:
            results += 1;
            pkg = i[0];
            version = i[1];
            architecture = i[2];
            suite = i[3];
            if not d.has_key(pkg):
                d[pkg] = {};
            if not d[pkg].has_key(version):
                d[pkg][version] = {};
            if not d[pkg][version].has_key(suite):
                d[pkg][version][suite] = [];
            d[pkg][version][suite].append(architecture);

        packages = d.keys();
        packages.sort();
        for pkg in packages:
            versions = d[pkg].keys();
            versions.sort(apt_pkg.VersionCompare);
            for version in versions:
                suites = d[pkg][version].keys();
                suites.sort();
                for suite in suites:
                    sys.stdout.write("%10s | %10s | %13s | " % (pkg, version, suite));
                    arches = d[pkg][version][suite];
                    arches.sort(utils.arch_compare_sw);
                    sys.stdout.write(", ".join(arches));
                    sys.stdout.write('\n');

    if not results:
        sys.exit(1);

#######################################################################################

if __name__ == '__main__':
    main()

